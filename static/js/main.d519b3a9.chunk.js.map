{"version":3,"sources":["Table.js","Form.js","App.js","serviceWorker.js","index.js"],"names":["TableHeader","react_default","a","createElement","TableBody","props","rows","filmsData","map","row","index","key","name","genre","onClick","removeFilm","Table","_this$props","this","Table_TableHeader","Table_TableBody","Component","Form","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","_event$target","target","value","setState","defineProperty","submitForm","handleSubmit","state","initialState","_this$state","type","onChange","App","films","concat","toConsumableArray","filter","i","className","src_Table","src_Form","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d519b3a9.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nconst TableHeader = () => { \n    return (\n        <thead>\n            <tr>\n                <th>Name</th>\n                <th>Genre</th>\n            </tr>\n        </thead>\n    );\n}\n\nconst TableBody = props => { \n    const rows = props.filmsData.map((row, index) => {\n        return (\n            <tr key={index}>\n                <td>{row.name}</td>\n                <td>{row.genre}</td>\n                <td><button onClick={() => props.removeFilm(index)}>Delete</button></td>\n            </tr>\n        );\n    });\n\n    return <tbody>{rows}</tbody>;\n}\n\n\nclass Table extends Component {\n    render() {\n        const { filmsData, removeFilm } = this.props;\n\n        return (\n            <table>\n                <TableHeader />\n                <TableBody \n                    filmsData={filmsData}\n                    removeFilm={removeFilm} \n                />\n            </table>\n        );\n    }\n}\n\n\n\nexport default Table;","import React, { Component } from 'react';\n\nclass Form extends Component {\n    constructor(props) {\n        super(props);\n\n        this.initialState = {\n            name: '',\n            genre: ''\n        };\n\n        this.state = this.initialState;\n    }\n\n    handleChange = event => {\n        const {name, value} = event.target;\n\n        this.setState({\n            [name] : value\n        });\n    }\n\n    submitForm = () => {\n        this.props.handleSubmit(this.state);\n        this.setState(this.initialState);\n    }\n\n    render() {\n        const { name, genre } = this.state;\n\n        return (\n            <form>\n                <label>Name</label>\n                <input\n                    type=\"text\"\n                    name=\"name\"\n                    value={name}\n                    onChange={this.handleChange} />\n                <label>Genre</label>\n                <input\n                    type=\"text\"\n                    name=\"genre\"\n                    value={genre}\n                    onChange={this.handleChange} />\n                <input\n                    type=\"button\"\n                    value=\"Submit\"\n                    onClick={this.submitForm} />\n            </form>\n        );\n    }\n\n}\nexport default Form;","import React, { Component } from 'react';\nimport './App.css';\nimport Table from './Table';\nimport Form from './Form';\n\nclass App extends Component {\n  state = {\n    films: []\n  };\n\n  handleSubmit = films => {\n    this.setState({films: [...this.state.films, films]});\n  }\n\n  removeFilm = index => {\n    const { films } = this.state;\n\n    this.setState({\n      films: films.filter((films, i) => {\n        return i !== index;\n      })\n    });\n  }\n\n  render() {\n    const { films } = this.state;\n\n      return (\n        <div className=\"container\">\n            <Table \n              filmsData={films}\n              removeFilm={this.removeFilm} \n            />\n            <Form handleSubmit={this.handleSubmit} />\n        </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}